## buffer-commands
Close buffer                         | <leader>c
Close all buffers except current     | <leader>bc
Close all buffers                    | <leader>bC
Close all buffers to the right       | <leader>br
Close all buffers to the left        | <leader>bl
Force close buffer                   | <leader>C
Next buffer                          | <C-n>, <leader>bn
Previous buffer                      | <C-p>, <leader>bp
Select buffer with letters           | <leader>bb
Close buffer with letters            | <leader>bd
Horizontal split buffer from tabs    | <leader>b\
Vertical split buffer from tabline   | <leader>b|
##copy-paste
Copy to system clipboard             | <leader>y, <D-c>
Paste from system clipboard          | <leader>pp, <D-v>
Copy line to system clipboard        | <leader>Y
Delete without yanking               | <leader>d
Delete rest of line without yanking  | <leader>D
Don't lose yank when pasting         | <leader>pp
##in-visual
Move highlighted line up             | K
Move highlighted line down           | J
##harpoon
Add file to harpoon                  | <leader>ha
Open harpoon list                    | <leader>hl
Open harpoon files in telescope      | <leader>ht
Go to harpoon mark 1                 | <C-m>
Go to harpoon mark 2                 | <C-,>
Go to harpoon mark 3                 | <C-.>
Go to harpoon mark 4                 | <C-/>
##surround
Add surrounding pair around motion                       | ys[motion][char]
Add surrounding pair around current line                 | yss[char] 
Add surrounding pair around motion (w/ new line)         | yS[motion][char]
Add surrounding pair around current line (w/ new line)   | ySS[motion][char]
Add surrounding pair around visual                       | [visual]S
Add surrounding pair around visual (w/ new line)         | [visual]gS
Change selected surrounding pair                         | cs[old][new]
Change selected surrounding pair (add new line)          | cs[old][new]
Delete selected surrounding pair                         | ds[pair]
Possible surrounding pairs                               | (, {, [, <, ', ", `
Other Surrounding options                                | t (html tag), f (function)
Surround alias < >                                       | a
Surround alias ( )                                       | p
Surround alias { }                                       | c
Surround alias [ ]                                       | b
Surround alias " ' `                                     | q
Surround alias any (no func/tag)                         | s
##LazyGit
Open LazyGit                         | <leader>gg
Open LazyGit for current file        | <leader>gf
##Sessions
Save current session                 | <leader>Ss
Load last session                    | <leader>Sl
Delete session                       | <leader>Sd
Search and load session              | <leader>Sf
Load current directory session       | <leader>S.
##select-and-swap
Select outer part of assignment      | a=
Select inner part of assignment      | i=
Select right part of assignment      | r=
Select left part of assignment       | l=
Select outer part of a method        | am
Select inner part of a method        | im
Select around conditional            | ai
Select inside conditional            | ii
Swap parameter/argument with next    | <leader>na
Swap method/function with next       | <leader>nm
Swap parameter/argument with previous| <leader>na
Swap method/function with previous   | <leader>nm
##telescope_(search)
Resume previous search               | <leader>f<CR>
Find files                           | <leader>ff
Find all files                       | <leader>fF
Find words                           | <leader>fw
Find words in all files              | <leader>fW
Find word under cursor               | <leader>fc
Find words in current buffer         | <leader>f/
Find buffers                         | <leader>fb
Find commands                        | <leader>fC
Find help                            | <leader>fh
Find keymaps                         | <leader>fk
Find man                             | <leader>fm
Find notifications                   | <leader>fn
Find history                         | <leader>fo
Find registers                       | <leader>fr
Find themes                          | <leader>ft
Find marks                           | <leader>f'
##toggle-terminal
Toggle term node                     | <leader>tn
Toggle term gdu                      | <leader>tu
Toggle term python                   | <leader>tp
Toggle term float                    | <leader>tf
Toggle term horizontal split         | <leader>th
Toggle term vertical split           | <leader>tv
Toggle terminal                      | <C-'>, <F7>
##Debugger
Debugger: Start/Continue             | <leader><leader>c
Debugger: Stop/Terminate Session     | <leader><leader>s
Debugger: Conditional Breakpoint     | <leader><leader>C
Debugger: Restart                    | <leader><leader>r
Debugger: Pause                      | <leader><leader>p
Debugger: Toggle Breakpoint          | <leader><leader>b
Debugger: Clear Breakpoints          | <leader><leader>B
Debugger: Step Into                  | <leader><leader>i
Debugger: Step Over                  | <leader><leader>o
Debugger: Step Out                   | <leader><leader>u
Debugger: Close Session              | <leader><leader>q
Debugger: Toggle REPL                | <leader><leader>t
Debugger: Run To Cursor              | <leader><leader>R
Debugger: Evalute Input              | <leader><leader>e
Debugger: Toggle UI                  | <leader><leader>u
Debugger: Hover                      | <leader><leader>h
##Folds
Toggle Folding                       | zi
Toggle Fold Under Cursor             | za
Toggle All Folds Under Cursor        | zA
Open Fold Under Cursor               | zo
Open All Folds Under Cursor          | zO
Close Fold Under Cursor              | zc
Close All Folds Under Cursor         | zC
Fold More                            | zm
Close All Folds                      | zM
Fold Less                            | zr
Open All Folds                       | zR
Peek Fold                            | zp
##UI-Options
Toggle autopairs                     | ua
Toggle background                    | ub
Toggle autocompletion                | uc
Toggle color highlight               | uC
Toggle diagnostics                   | ud
Toggle signcolumn                    | ug
Change indent setting                | ui
Toggle status line                   | ul
Toggle CodeLens                      | uL
Change line numbering                | un
Toggle notifications                 | uN
Toggle paste mode                    | up
Toggle spellcheck                    | us
Toggle conceal                       | uS
Toggle tabline                       | ut
Toggle URL highlight                 | uu
Toggle wrap                          | uw
Toggle syntax highlighting (buffer)  | uy
Toggle foldcolumn                    | uh
## edit-vim
Back to normal mode                  | <Esc>
Cancel command/operation             | <C-c>
Insert at cursor pos.                | i
Append after cursor                  | a
Insert at start of line              | I
Append at end of line                | A
Open new line below                  | o
Open new line above                  | O
Replace character with {c}           | r{c}
Replace mode/overwrite               | R
Change                               | c
Replace line                         | cc
Repeat last command                  | .
Undo                                 | u
Redo                                 | <C-r>
Next text state                      | g+
Prev text state                      | g-
Cut                                  | d
Cut into register {r}                | "{r}d
Cut into OS clipboard                | "*d
Cut {n} lines                        | {n}dd
Cut until EOL                        | D
Cut {n} characters forward
Cut {n} characters backwards         | {n}X
Cut all                              | :%d
Copy                                 | y
Copy into register {r}               | "{r}y
Copy into OS clipboard               | "*y
Copy {n} lines                       | {n}yy
Copy until EOL                       | y$
Copy all                             | :%y
Paste after cursor                   | p
Paste before cursor                  | P
Paste from register {r}              | "{r}p
Paste from register {r}              | <C-r>{r}
Paste from OS clipboard              | "*p
Paste after and align                | ]p
Paste before and align               | ]P
Visual mode (select)                 | v
Linewise visual mode                 | V
Block visual mode                    | <C-v>
Insert in selected lines             | <C-v>{Move}I
Append to selected lines             | <C-v>{Move}A
Change in selected lines             | <C-v>{Move}c
Delete in selected lines             | <C-v>{Move}x
Reselect visual                      | gv
Select all                           | ggVG
Record macro into register {r}       | q{r}
Stop recording macro                 | q
Run recorded macro in register {r}   | @{r}
Repeat last macro                    | @@
Repeat last Ex command               | @:
Run {Cmd} in all buffers             | :bufdo {Cmd}

## text-objects-vim
Around word                          | aw
Inside word                          | iw
Around WORD                          | aW
Inside WORD                          | iW
Around sentence                      | as
Inside sentence                      | is
Around paragraph                     | ap
Inside paragraph                     | ip
Around parentheses                   | a( , ab
Inside parentheses                   | i( , ib
Around brackets                      | a[
Inside brackets                      | i[
Around braces                        | a{ , aB
Inside braces                        | i{ , iB
Around (XML) tags                    | at
Inside (XML) tags                    | it
Around < and >                       | a<
Inside < and >                       | i<
Around double quotes                 | a"
Inside double quotes                 | i"
Around simple quotes                 | a'
Inside simple quotes                 | i'
Around backticks                     | a`
Inside backticks                     | i`

## text-manipulation-vim
Change to uppercase                  | gU
Change to lowercase                  | gu
Uppercase line                       | gUU
Lowercase line                       | guu
Change to uppercase                  | U
Change to lowercase                  | u
Toggle case                          | ~
Indent (. to repeat)                 | >
Unindent (. to repeat)               | <
Reindent                             | =
Indent line (. repeats)              | >>
Unindent (. repeats)                 | <<
Reindent line                        | ==
Indent line (insert mode)            | <C-t>
Unindent line (insert mode)          | <C-d>
Hard-wrap (cursor moves)             | gq
Hard-wrap (cursor stays)             | gw
Format current line                  | gww
Join with next line                  | J
Join next line preserve spaces       | gJ
Use hard tabs                        | :set noet
Use soft tabs (spaces)               | :set et
Detab (needs 'et' on)                | :retab
Entab (needs 'et' off)               | :retab!
Set text width to {n}                | :set tw={n}
Sort selected lines                  | :sort
Sort+remove duplicates               | :sort u
Run macro in reg {r} for each line   | :norm @{r}
Run {Cmd} on lines matching {P}      | :g/{P}/{Cmd}
Autocomplete (search forward)        | <C-n>
Autocomplete (search backwards)      | <C-p>
Omnicomplete                         | <C-x><C-o>
Line autocomplete                    | <C-x><C-l>
Insert digraph                       | <C-k>{c}{c}
Insert calculated expr.              | <C-r>=
Increment number by {n}              | {n}<C-a>
Decrement number by {n}              | {n}<C-x>

## spell-vim
Toggle spell checking                | :setl spell!
To next misspelled word              | ]s
To prev misspelled word              | [s
Suggest corrections (normal mode)    | z=
Suggest corrections (insert mode)    | <C-x>s
Permanently mark as correct          | zg
Undo mark as correct                 | zug
Temporarily mark as correct          | zG
Permanently mark as incorrect        | zw
Undo mark as incorrect               | zuw
Temporarily mark as incorrect        | zW

## navigation-vim
Scroll down a full page              | <C-f>
Scroll up a full page                | <C-b>
Scroll down half a page              | <C-d>
Scroll up half a page                | <C-u>
Scroll down a bit                    | <C-e>
Scroll up a bit                      | <C-y>
Scroll horizontally right            | {n}zl
Scroll horizontally left             | {n}zh
Scroll horizontally half a screen    | zL
Scroll horizontally half a screen    | zH
Scroll line to top                   | zt
Scroll to bottom                     | zb
Scroll to center                     | zz
Toggle soft-wrapping                 | :setl wrap!
Page guide at column {n}             | :setl cc={n}
No page guide                        | :setl cc=
Toggle line numbers                  | :setl nu!
Toggle relative line numbers         | :setl rnu!
Toggle invisibles                    | :setl list!
Unfold all                           | zR
Show files                           | :ls
Edit buffer (autocomplete)           | :b <Tab>
Edit buffer {n}                      | :b{n}
Edit last edited file                | <C-^>
Edit next buffer                     | :bn
Edit prev buffer                     | :bp
Edir prev in arg list                | :prev
Edir next in arg list                | :next
Get file info                        | <C-g>
Character info                       | ga
Go to file under cursor              | gf
Line/word/char count                 | g<C-g>
Toggle cursorline                    | :setl cul!
Toggle search highlight              | :setl hls!
Cycle match groups (eg. if,else,end) | g%

## search-vim
Toggle ignore case                   | :set ic!
Search forward for {P}               | /{P}
Search backward for {P}              | ?{P}
Go to next match                     | n
Go to previous match                 | N
Select up to next match              | gn
Select up to prev match              | gN
Search word under cursor backward    | *
Search word under cursor forward     | #
Go to next match during search       | <C-G>
Go to previous match during search   | <C-T>
Find and replace                     | :s/{P}/{P}/g
Find and replace confirm             | :s/{P}/{P}/gc
Find and replace all                 | <leader>s, :%s/{P}/{P}/g
Open quickfix                        | :copen
Prev in quickfix list                | :cp
Next in quickfix list                | :cn
Close quickfix                       | :cclose
Open location list                   | :lopen
Prev in location list                | :lp
Next in location list                | :lne
Close location list                  | :lclose
Next command (command mode)          | <C-n>
Prev command (command mode)          | <C-p>
Browse command history               | q:
Browse search patterns               | q/
Use this file for diff               | :diffthis
Exit diff mode                       | :diffoff!
Re-scan files for diffs              | :diffupdate
Next difference                      | ]c
Prev difference                      | [c
Diff put                             | dp
Diff obtain                          | do
Get differences                      | :diffget
Put differences                      | :diffput

## movement-vim
Left                                 | h
Right                                | l
Up                                   | k
Down                                 | j
Up (honor soft-wrapping)             | gk
Down (honor soft-wrapping)           | gj
Start of next word                   | w
Start of prev word                   | b
End of next word                     | e
End of prev word                     | ge
Start of next WORD                   | W
Start of prev WORD                   | B
End of next WORD                     | E
End of prev WORD                     | gE
Start of line                        | 0
End of line                          | $
This line 1st non-blank              | ^
Next line 1st non-blank              | +
Prev line 1st non-blank              | -
First line                           | gg
Last line                            | G
Next {c} in this line                | f{c}
Just before next {c}                 | t{c}
Prev {c} in this line                | F{c}
Just after prev {c}                  | T{c}
Repeat f/t/F/T forward               | ;
Repeat f/t/F/T backward              | ,
Prev pos in change list              | g;
Next pos in change list              | g,
Go to line {n}                       | :{n}
Go to column {n}                     | {n}|
Jump to line {n}                     | {n}G
Jump to next blank line              | }
Jump to prev blank line              | {
Jump to begin of block               | [{
Jump to end of block                 | ]}
Jump to end of sentence              | )
Jump to beg. of sentence             | (
Jump to end of section               | ]]
Jump to beg. of section              | [[
Jump to top of window                | H
Jump to middle                       | M
Jump to bottom                       | L
Jump to matching delim               | %
Jump to specified tag                | :tag [tagname]
Jump to older tag                    | <C-t>
Jump to tag definition               | <C-]>
Jump to tag definition, show choices | g]
Jump or show choices                 | g<C-]>
To next matching tag                 | :tn
To prev matching tag                 | :tp
Set mark {c}                         | m{c}
Jump to mark at {c}                  | `{c}
View all marks                       | :marks
Remove marks                         | :delmarks {mark}
Jump to definition                   | gd
To prev jump position                | <C-o>
To next jump position                | <C-i>
Go to last insertion and INSERT      | gi

## folds-vim
Go to start of next fold             | zj
Go to end of previous fold           | zk
Open fold under cursor               | zo
Open all folds under cursor          | zO
Close fold under cursor              | zc
Close all folds under cursor         | zC
Toggle fold under cursor             | za
Toggle all folds under cursor        | zA
Open folds to show cursor line       | zv
Close all folds                      | zM
Open all folds                       | zR
Fold more                            | zm
Fold less                            | zr
Update folds                         | zx

## window-vim
New horizontal split                 | :new
New horizontal split                 | <C-w><C-n>
New vertical split                   | :vnew
Close window                         | <C-w>c
Close inactive windows               | <C-w><C-o>
Split horizontally                   | | , <C-w>s
Split vertically                     | \ , <C-w><C-v>
Exchange windows                     | <C-w><C-x>
Move to the very top                 | <C-w>K
Move to the very bottom              | <C-w>J
Move to the far right                | <C-w>L
Move to the far left                 | <C-w>H
One window per file                  | :ball
Cycle through windows                | <C-w><C-w>
Back to previous window              | <C-w><C-p>
Edit window to the left              | <C-w><C-h>
Edit window below                    | <C-w><C-j>
Edit window above                    | <C-w><C-k>
Edit window to the right             | <C-w><C-l>
Edit top window                      | <C-w><C-t>
Edit bottom window                   | <C-w><C-b>
All windows same size                | <C-w>=
Maximize height                      | <C-w>_
Maximize width                       | <C-w>|
Decrease height                      | <C-w>-
Increase height                      | <C-w>+
Decrease width                       | <C-w><
Increase width                       | <C-w>>
Execute {Cmd} in all windows         | :windo {Cmd}

## tabs-vim
New untitled tab                     | :tabnew
New/open in tab                      | :tabe [file]
Next tab                             | gt
Previous tab                         | gT
Go to tab {n}                        | {n}gt
Close tab                            | :tabc
Close all other tabs                 | :tabo
List tabs                            | :tabs
Move window to new tab               | <C-w>T
Open one tab per buffer              | :tab ball
Execute {Cmd} in all tabs            | :tabdo {Cmd}

## filename-modifiers-vim
Full path                            | %:p
Relative to $HOME                    | %:~
Relative to current directory        | %:.
Filename only (tail)                 | %:t
Remove last extension (get root)     | %:r
Extension only                       | %:e
Escape special chars (use in shell)  | %:S
Substitute first                     | %:s?pat?sub?
Substitute all                       | %:gs?pat?sub?
Get directory of file                | %:p:h

## help-vim
Help                                 | :h [helptag]
Help search                          | :helpgrep {searchterm}
Help on highlight test               | :h hitest.vim
View mappings                        | :map [mapping]
View Insert mode mappings            | :imap [mapping]
View registers                       | :reg
List of sourced files                | :scr
List of digraphs                     | :digraphs
List all syntax items                | :syn

## misc-vim
Show current directory               | :pwd
Change directory                     | :cd {dir}
Change to home directory             | :cd
Show value of {Var}                  | :echo {Var}
I
Show value of option                 | :set {Opt}?
